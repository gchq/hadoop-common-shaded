buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.3' apply true
    id "com.jfrog.bintray" version "1.7.3" apply true
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

//if the project has a value for the passed property (i.e from the cmd line via -PpropName=xxx)
//use that, else use a default value
ext.getPropertyOrDefault = { propName, defaultValue -> 
    def val;
    if (project.hasProperty(propName) && project.getProperty(propName) != "unspecified" && project.getProperty(propName) != "") {
        val = project.getProperty(propName)
        println "Using property [$propName] with value [$val]"
    } else {
        val = defaultValue
        println "Property [$propName] has no value, using default value [$val]"
    }
    return val;
}

ext.versions = [
    //------hadoop-common-shaded-------
    hadoopCommonShaded: getPropertyOrDefault('version', 'SNAPSHOT'),

    //------3rd party libs------------
    hadoop: '2.6.4',
    zzzDummyzzz: 'Here to make sorting easier'
]

//dependency strings for use in sub projects
ext.libs = [
    hadoop_common: "org.apache.hadoop:hadoop-common:$versions.hadoop",
    zzzDummyzzz: 'Here to make sorting easier'
]

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
    compile(libs.hadoop_common) {
        // Exclude all logging so we can use our own SLF4J/Logback and its bridging pkgs
        exclude group: "org.slf4j", module: "slf4j-api"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude group: "log4j", module: "log4j"
        exclude group: "commons-logging", module: "commons-logging"
        // Stop it dragging in any xerces impls that will conflict with ours
        exclude module: 'xercesImpl'

        // we wannt to use the jaxb impl in the jdk
        exclude group: "com.sun.xml.bind", module: "jaxb-impl"
    }
}

group = 'stroom'
version = versions.hadoopCommonShaded

sourceCompatibility = 1.8
targetCompatibility = 1.8

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    scm {
       url "https://github.com/stroom/hadoop-common-shaded"
    }
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
            // No point in publishing sources/javadocs as these will be empty as the
            // shadow plugin cannot merge dependency sources/javadocs into shadow jars
            //artifact sourcesJar
            //artifact javadocJar
            pom.withXml {
                def root = asNode()
                root.appendNode('name', project.name)
                root.children().last() + pomConfig
            }
        }
    }
}

//configuration for the bintray plugin for uploading maven artefacts to bintray
//see https://github.com/bintray/gradle-bintray-plugin
//run task bintrayUpload to push the files, assuming BINTRAY_USER/KEY are set as env vars
bintray {
    //Must never write these to log or system out
    user = System.getenv('BINTRAY_USER') //set in Travis UI
    key = System.getenv('BINTRAY_KEY') //set in Travis UI

    //The maven plugin publications to push to bintray
    publications = ['shadow']

    //immediately make the artefacts public
    publish = true

    pkg {
        repo = 'stroom'
        name = 'hadoop-common-shaded'
        userOrg = 'stroom'
        licenses = ['Apache-2.0'] //This assume the only 
        vcsUrl = 'https://github.com/gchq/hadoop-common-shaded.git'
        version {
            name = "${versions.hadoopCommonShaded}"
            desc = "hadoop-common-shaded-${versions.hadoopCommonShaded}"
            released  = new Date()
            vcsTag = "${versions.hadoopCommonShaded}"
            gpg {
                //Bintray will self-sign the files
                sign = true //Determines whether to GPG sign the files. The default is false
            }
        }
    }
}

shadowJar {
    //this stops the maven classifier being 'all'. We want the default jar to be the shadow one
    classifier = ''

    def prefix = "stroom.hadoopcommonshaded." 

    def relocatePackageWithExclusions = { String pkg, List<String> exclusions ->
        relocate (pkg, prefix + pkg) {
            if (exclusions != null) {
                exclusions.each { 
                    exclude it
                }
            }
        }
    }

    // method for doing the relocation of a package
    def relocatePackage = { String pkg -> 
        relocatePackageWithExclusions(pkg, [])
    }

    // rename all non hadoop packages to avoid conflicts
    // you can use the following to find the unique packages in the shadow jar
    // unzip -l hadopp-common-shaded | grep -v "META-INF" | grep -P " \d{4}-\d{2}-\d{2} " | cut -c30- | sed -E 's#[^\/]+$##g' | sort | uniq | less
    relocatePackage 'com.google'
    relocatePackage 'com.istack'
    relocatePackage 'com.jamesmurty'
    relocatePackage 'com.jcraft'
    relocatePackage 'com.sun.activation'
    relocatePackage 'com.sun.jersey'
    relocatePackage 'com.sun.research'
    relocatePackage 'com.sun.xml.bind'
    relocatePackage 'com.sun.xml.twx2'
    relocatePackage 'com.thoughtworks'
    relocatePackage 'contribs'
    relocatePackage 'javax.ws'
    relocatePackage 'javax.servlet'
    relocatePackage 'javax.el'
    relocatePackage 'javax.annotation'
    relocatePackage 'jline'
    relocatePackage 'net'
    relocatePackageWithExclusions 'org', [
        'org/apache/commons/logging/**', 
        'org/apache/hadoop/**',
        'org/w3c/dom/**',
        'org/xml/**',
        'org/slf4j/**']
}

tasks.build.dependsOn shadowJar
