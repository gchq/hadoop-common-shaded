buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0' apply true
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
}

ext.isPropertySet = { propName ->
    if (!project.hasProperty(propName)) {
        return false
    } else {
        def prop = project.getProperty(propName)
        return (prop != "unspecified" && (prop != "" || prop != null))
    }
}

ext.ensurePropertyIsSet = { propName -> 
    if (!isPropertySet(propName)) {
        throw new GradleException(
            "Expecting project property [${propName}] or env var [ORG_GRADLE_PROJECT_${propName}] to be set.")
    }
}

//if the project has a value for the passed property (i.e from the cmd line via -PpropName=xxx)
//use that, else use a default value
ext.getPropertyOrDefault = { propName, defaultValue ->
    def val;
    if (isPropertySet(propName)) {
        val = project.getProperty(propName)
        println "Getting property [$propName] with value [$val]"
    } else {
        val = defaultValue
        println "Property [$propName] has no value, using default value [$val]"
    }
    return val;
}

ext.versions = [
    //------hadoop-common-shaded-------
    hadoopCommonShaded: getPropertyOrDefault('version', 'SNAPSHOT').replaceFirst(/^v/, ""),

    //------3rd party libs------------
    hadoop: '2.6.4',
]

//dependency strings for use in sub projects
ext.libs = [
    hadoop_common: "org.apache.hadoop:hadoop-common:$versions.hadoop",
]

ext.isReleaseBuild = !versions.hadoopCommonShaded.endsWith('SNAPSHOT')

if (isReleaseBuild) {
    println "This is a release build for maven version [${versions.hadoopCommonShaded}]"
    // Ensure the various props are set for signing and publishing to sonatype

    // The username for Sonatype OSSRH Jira account
    ensurePropertyIsSet("sonatypeUsername")
    // The password for Sonatype OSSRH Jira account
    ensurePropertyIsSet("sonatypePassword")
    // The GPG2 secret key in ascii armour format, base64 encoded
    ensurePropertyIsSet("signingKey")
    // The password for the GPG2 secret key
    ensurePropertyIsSet("signingPassword")
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'io.github.gradle-nexus.publish-plugin'
apply plugin: 'signing'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile(libs.hadoop_common) {
        // Exclude all logging so we can use our own SLF4J/Logback and its bridging pkgs
        exclude group: "org.slf4j", module: "slf4j-api"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude group: "log4j", module: "log4j"
        exclude group: "commons-logging", module: "commons-logging"
        // Stop it dragging in any xerces impls that will conflict with ours
        exclude module: 'xercesImpl'

        // we wannt to use the jaxb impl in the jdk
        exclude group: "com.sun.xml.bind", module: "jaxb-impl"
    }
}

group = 'uk.gov.gchq.hadoop.common'
version = versions.hadoopCommonShaded

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

String base64DecodeProjectProperty(String propName) {
    def encodedVal = project.findProperty(propName)
    return encodedVal == null
        ? null
        : new String(Base64.getDecoder().decode(encodedVal.toString())).trim()
}

void configureSigning(Project project) {

    // To create the GPG key do:
    //   gpg2 --gen-key 
    // To list it
    //   gpg2 --list-keys
    // To publish the public key on a keyserver
    //   gpg2 --keyserver hkp://keyserver.ubuntu.com --send-keys <your short key id>
    // To get the ascii-armour private key for use in travis env vars as base64 encoded
    //   gpg2 --armor --export-secret-keys <your short key id> | base64 -w0

    //project.signing.gnupg.keyName = project.findProperty("signingKeyId")

    project.signing {
        println "Configuring project to sign maven artifacts"
        required { project.gradle.taskGraph.hasTask("required") }
        def signingKeyId = project.findProperty("signingKeyId")
        def signingKey = base64DecodeProjectProperty("signingKey")
        def signingPassword = project.findProperty("signingPassword")

        //println "pword: [$signingPassword]"
        //println "key: [$signingKey]"
        //println "keyId: [$signingKeyId]"

        if (signingKeyId) {
            println "Using in memory pgp key with ID"
            useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        } else if (signingKey) {
            println "Using in memory pgp key without ID"
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
        //useGpgCmd()
        sign project.publishing.publications.shadow
    }
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
            // No point in publishing sources/javadocs as these will be empty as the
            // shadow plugin cannot merge dependency sources/javadocs into shadow jars
            pom {
                name = project['name']
                description = "Shaded version of hadoop-common"
                url = 'https://github.com/gchq/hadoop-common-shaded'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'GCHQDevelopers'
                        organization = 'GCQH'
                        organizationUrl = 'https://github.com/gchq'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:gchq/hadoop-common-shaded.git'
                    developerConnection = 'scm:git:git@github.com:gchq/hadoop-common-shaded.git'
                    url = 'https://github.com/gchq/hadoop-common-shaded'
                }
            }         
        }
    }
}

def hasSigningKey = project.hasProperty("signingkeyId") || project.findProperty("signingKey")
if(hasSigningKey) {
    configureSigning(project)
}

// Uses sonotypeUsername and sonotypePassword
// See https://github.com/rwinch/gradle-publish-ossrh-sample
// Also https://github.com/kit-data-manager/nexus-publish-example
nexusPublishing {
    repositories {
        sonatype()    //sonatypeUsername and sonatypePassword properties are used automatically
    }
    // these are not strictly required. The default timeouts are set to 1 minute. But Sonatype can be really slow.
    // If you get the error "java.net.SocketTimeoutException: timeout", these lines will help.
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

shadowJar {
    //this stops the maven classifier being 'all'. We want the default jar to be the shadow one
    classifier = ''

    def prefix = "stroom.hadoopcommonshaded." 

    def relocatePackageWithExclusions = { String pkg, List<String> exclusions ->
        relocate (pkg, prefix + pkg) {
            if (exclusions != null) {
                exclusions.each { 
                    exclude it
                }
            }
        }
    }

    // method for doing the relocation of a package
    def relocatePackage = { String pkg -> 
        relocatePackageWithExclusions(pkg, [])
    }

    // rename all non hadoop packages to avoid conflicts
    // you can use the following to find the unique packages in the shadow jar
    // unzip -l hadopp-common-shaded | grep -v "META-INF" | grep -P " \d{4}-\d{2}-\d{2} " | cut -c30- | sed -E 's#[^\/]+$##g' | sort | uniq | less
    relocatePackage 'com.google'
    relocatePackage 'com.istack'
    relocatePackage 'com.jamesmurty'
    relocatePackage 'com.jcraft'
    relocatePackage 'com.sun.activation'
    relocatePackage 'com.sun.jersey'
    relocatePackage 'com.sun.research'
    relocatePackage 'com.sun.xml.bind'
    relocatePackage 'com.sun.xml.twx2'
    relocatePackage 'com.thoughtworks'
    relocatePackage 'contribs'
    relocatePackage 'javax.ws'
    relocatePackage 'javax.servlet'
    relocatePackage 'javax.el'
    relocatePackage 'javax.annotation'
    relocatePackage 'jline'
    relocatePackage 'net'
    relocatePackageWithExclusions 'org', [
        'org/apache/commons/logging/**', 
        'org/apache/hadoop/**',
        'org/w3c/dom/**',
        'org/xml/**',
        'org/slf4j/**']
}

tasks.build.dependsOn shadowJar
